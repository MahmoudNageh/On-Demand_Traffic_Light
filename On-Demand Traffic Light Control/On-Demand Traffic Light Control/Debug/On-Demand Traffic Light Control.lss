
On-Demand Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000760  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000007d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000804  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ee  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000891  00000000  00000000  00001b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bad  00000000  00000000  0000241f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00002fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a3  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d7f  00000000  00000000  00003843  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000045c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  74:	0c 94 ae 03 	jmp	0x75c	; 0x75c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:
void app_init()
{
	/* DIO Initialization */
	
	// Set LEDs Direction OUTPUT
	DIO_init(CAR_GREEN_PIN	,	CAR_PORT, OUTPUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	60 e0       	ldi	r22, 0x00	; 0
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_init>
	DIO_init(CAR_YELLOW_PIN	,	CAR_PORT, OUTPUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_init>
	DIO_init(CAR_RED_PIN	,	CAR_PORT, OUTPUT);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_init>
	
	DIO_init(PED_GREEN_PIN	,	PED_PORT, OUTPUT);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_init>
	DIO_init(PED_YELLOW_PIN	,	PED_PORT, OUTPUT);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_init>
	DIO_init(PED_RED_PIN	,	PED_PORT, OUTPUT);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_init>
	
	// Set Button Direction INPUT
	BUTTON_init(BUTTON_PIN, BUTTON_PORT);
  b8:	63 e0       	ldi	r22, 0x03	; 3
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	0e 94 9e 01 	call	0x33c	; 0x33c <BUTTON_init>
	
	
	/* Interrupts Initialization */
	
	// Enable Global Interrupt
	SET_BIT(SREG, GIE);
  c0:	8f b7       	in	r24, 0x3f	; 63
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	8f bf       	out	0x3f, r24	; 63
	
	
	// INT 0 Sense Any Logical Change ( It's set that way so we can distinguish between a short and a long press )
	SET_BIT(MCUCR, ISC00);
  c6:	85 b7       	in	r24, 0x35	; 53
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	85 bf       	out	0x35, r24	; 53
	CLR_BIT(MCUCR, ISC01);
  cc:	85 b7       	in	r24, 0x35	; 53
  ce:	8d 7f       	andi	r24, 0xFD	; 253
  d0:	85 bf       	out	0x35, r24	; 53
	
	// Enable INT0
	SET_BIT(GICR, INT0);
  d2:	8b b7       	in	r24, 0x3b	; 59
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	8b bf       	out	0x3b, r24	; 59
	
	// Enable Overflow Interrupts for TIMER0 and TIMER2
	SET_BIT(TIMSK,TOIE0);
  d8:	89 b7       	in	r24, 0x39	; 57
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	89 bf       	out	0x39, r24	; 57
	SET_BIT(TIMSK,TOIE2);
  de:	89 b7       	in	r24, 0x39	; 57
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	89 bf       	out	0x39, r24	; 57
	
	// Timer 0 initialization
	TIMER0_init(NORMAL_MODE);
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <TIMER0_init>
	
	// Timer 2 initialization
	TIMER2_init(NORMAL_MODE);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 55 03 	call	0x6aa	; 0x6aa <TIMER2_init>
	
	// Timer 0 Start
	TIMER0_start(PRESCALER_64, TIMER0_INITIAL_VALUE);
  f0:	67 ef       	ldi	r22, 0xF7	; 247
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 13 03 	call	0x626	; 0x626 <TIMER0_start>
  f8:	08 95       	ret

000000fa <app_start>:
void app_start()
{
	while (1)
	{
		// To Ensure GREEN -> YELLOW -> RED -> YELLOW -> GREEN... Loop
		if (CAR_STATE > CAR_YELLOW_2)
  fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <CAR_STATE>
  fe:	84 30       	cpi	r24, 0x04	; 4
 100:	18 f0       	brcs	.+6      	; 0x108 <app_start+0xe>
		{
			CAR_STATE = CAR_GREEN;
 102:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <CAR_STATE>
 106:	f9 cf       	rjmp	.-14     	; 0xfa <app_start>
		}
		
		else
		{
			switch(CAR_STATE)
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	11 f1       	breq	.+68     	; 0x150 <app_start+0x56>
 10c:	30 f0       	brcs	.+12     	; 0x11a <app_start+0x20>
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	99 f1       	breq	.+102    	; 0x178 <app_start+0x7e>
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	09 f4       	brne	.+2      	; 0x118 <app_start+0x1e>
 116:	4b c0       	rjmp	.+150    	; 0x1ae <app_start+0xb4>
 118:	f0 cf       	rjmp	.-32     	; 0xfa <app_start>
			{
				case CAR_GREEN:
				
					// Turn On Car GREEN led and Pedestrian RED led
					LED_on(CAR_GREEN_PIN,CAR_PORT);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 a2 01 	call	0x344	; 0x344 <LED_on>
					LED_off(CAR_YELLOW_PIN, CAR_PORT);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					LED_off(CAR_RED_PIN, CAR_PORT);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
				
					LED_off(PED_GREEN_PIN,PED_PORT);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					LED_off(PED_YELLOW_PIN,PED_PORT);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					LED_on(PED_RED_PIN,PED_PORT);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 a2 01 	call	0x344	; 0x344 <LED_on>
				
					YELLOW_FLAG = 0;
 14a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <YELLOW_FLAG>
					break;
 14e:	d5 cf       	rjmp	.-86     	; 0xfa <app_start>
				
				case CAR_YELLOW_1:
				
					// Set The Yellow Flag So it can blink 
					YELLOW_FLAG = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <YELLOW_FLAG>
					
					LED_off(CAR_GREEN_PIN,CAR_PORT);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					LED_off(CAR_RED_PIN, CAR_PORT);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
				
					LED_off(PED_GREEN_PIN,PED_PORT);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					LED_off(PED_RED_PIN,PED_PORT);
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					break;
 176:	c1 cf       	rjmp	.-126    	; 0xfa <app_start>
				
				case CAR_RED:
				
					// Turn On Car RED led and Pedestrian GREEN led
					LED_off(CAR_GREEN_PIN,CAR_PORT);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					LED_off(CAR_YELLOW_PIN, CAR_PORT);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					LED_on(CAR_RED_PIN, CAR_PORT);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 a2 01 	call	0x344	; 0x344 <LED_on>
				
					LED_on(PED_GREEN_PIN,PED_PORT);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 a2 01 	call	0x344	; 0x344 <LED_on>
					LED_off(PED_YELLOW_PIN,PED_PORT);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					LED_off(PED_RED_PIN,PED_PORT);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					
					YELLOW_FLAG = 0;
 1a8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <YELLOW_FLAG>
					break;
 1ac:	a6 cf       	rjmp	.-180    	; 0xfa <app_start>
				
				case CAR_YELLOW_2:
				
					// Set The Yellow Flag So it can blink 
					YELLOW_FLAG = 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <YELLOW_FLAG>
					
					LED_off(CAR_GREEN_PIN,CAR_PORT);
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					LED_off(CAR_RED_PIN, CAR_PORT);
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
				
					LED_off(PED_GREEN_PIN,PED_PORT);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					LED_off(PED_RED_PIN,PED_PORT);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 a6 01 	call	0x34c	; 0x34c <LED_off>
					break;
 1d4:	92 cf       	rjmp	.-220    	; 0xfa <app_start>

000001d6 <__vector_11>:


/**** TIMER 0 Overflow ISR ****/

ISR(TIMER0_OVF)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	// Check if the overflow counter reached the number of overflows to ( 1s ) 
	if (overflow_Counter < TIMER0_NumOfOverFlows)
 1f8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <overflow_Counter>
 1fc:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <overflow_Counter+0x1>
 200:	8e 33       	cpi	r24, 0x3E	; 62
 202:	91 05       	cpc	r25, r1
 204:	30 f4       	brcc	.+12     	; 0x212 <__vector_11+0x3c>
	{
		overflow_Counter++;
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <overflow_Counter+0x1>
 20c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <overflow_Counter>
 210:	21 c0       	rjmp	.+66     	; 0x254 <__vector_11+0x7e>
	}
	
	else if (overflow_Counter >= TIMER0_NumOfOverFlows)
 212:	ce 97       	sbiw	r24, 0x3e	; 62
 214:	f8 f0       	brcs	.+62     	; 0x254 <__vector_11+0x7e>
	{
		// Increment a second
		seconds_Counter++;
 216:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <seconds_Counter>
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <seconds_Counter>
		
		
		if (YELLOW_FLAG == 1)
 220:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <YELLOW_FLAG>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	39 f4       	brne	.+14     	; 0x236 <__vector_11+0x60>
		// If The Yellow Flag is Set Toggle Both YELLOW LEDs
		{
			LED_toggle(CAR_YELLOW_PIN,CAR_PORT);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	0e 94 aa 01 	call	0x354	; 0x354 <LED_toggle>
			LED_toggle(PED_YELLOW_PIN,PED_PORT);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 aa 01 	call	0x354	; 0x354 <LED_toggle>
		}
		
		if (seconds_Counter == 5)
 236:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <seconds_Counter>
 23a:	85 30       	cpi	r24, 0x05	; 5
 23c:	39 f4       	brne	.+14     	; 0x24c <__vector_11+0x76>
		{
			// If The Seconds Counter Counts 5 Seconds Switch To The Next Signal State
			CAR_STATE++;
 23e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <CAR_STATE>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <CAR_STATE>
			
			// Reset The Seconds Counter
			seconds_Counter = 0;
 248:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <seconds_Counter>
		}
		
		// Reset The Overflow Counter
		overflow_Counter = 0;
 24c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <overflow_Counter+0x1>
 250:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <overflow_Counter>
	}
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <__vector_5>:


/**** TIMER 2 Overflow ISR ****/

ISR(TIMER_2_OVF)
{
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
	// Just Increment The Overflow Counter
	overflow_Counter2++;
 284:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <overflow_Counter2>
 288:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <overflow_Counter2+0x1>
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <overflow_Counter2+0x1>
 292:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <overflow_Counter2>
}
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_1>:


/**** EXT INT0 ISR ****/

ISR (EXT_INT_0)
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
	// Increment The Pressed Flag
	PRESSED_BUTTON_FLAG++;
 2c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	/* The Interrupt Is Set To Any Logical Change So That
	 * We Can Count The Time Between The 2 Logical Changes
	 * ( Rising Edge When Pressed and Falling When Released )
	 */
	
	switch(PRESSED_BUTTON_FLAG)
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	19 f0       	breq	.+6      	; 0x2da <__vector_1+0x36>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <__vector_1+0x40>
 2d8:	20 c0       	rjmp	.+64     	; 0x31a <__vector_1+0x76>
	{
		case PRESSED:
			
			// Start Timer2 At The Rising Edge 
			TIMER2_start(PRESCALER_64,47);
 2da:	6f e2       	ldi	r22, 0x2F	; 47
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <TIMER2_start>
			break;
 2e2:	1b c0       	rjmp	.+54     	; 0x31a <__vector_1+0x76>
			
		case RELEASED:
		
			// Check The overflow Counter Counted More Than Half a Second Or Not
			if (overflow_Counter2 > TIMER2_NumOfOverFlows)
 2e4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <overflow_Counter2>
 2e8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <overflow_Counter2+0x1>
 2ec:	4f 97       	sbiw	r24, 0x1f	; 31
 2ee:	68 f4       	brcc	.+26     	; 0x30a <__vector_1+0x66>
			}
			
			// The Button Was Released Before 0.5s (aka. Short Press )
			else
			{
				if (CAR_STATE == CAR_GREEN)
 2f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <CAR_STATE>
 2f4:	81 11       	cpse	r24, r1
 2f6:	09 c0       	rjmp	.+18     	; 0x30a <__vector_1+0x66>
				{
					// If The Car Signal Is GREEN Switch It To YELLOW
					CAR_STATE++;
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <CAR_STATE>
					
					// Reset The Counters
					seconds_Counter = 0;
 2fe:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <seconds_Counter>
					overflow_Counter = 0;
 302:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <overflow_Counter+0x1>
 306:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <overflow_Counter>
				}
				
		}
		
		// Stop TIMER2
		TIMER2_stop();
 30a:	0e 94 ac 03 	call	0x758	; 0x758 <TIMER2_stop>
		
		// Reset The Counter and The Flag
		overflow_Counter2	= 0;
 30e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <overflow_Counter2+0x1>
 312:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflow_Counter2>
		PRESSED_BUTTON_FLAG = 0;
 316:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
	}
	
}
 31a:	ff 91       	pop	r31
 31c:	ef 91       	pop	r30
 31e:	bf 91       	pop	r27
 320:	af 91       	pop	r26
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	7f 91       	pop	r23
 328:	6f 91       	pop	r22
 32a:	5f 91       	pop	r21
 32c:	4f 91       	pop	r20
 32e:	3f 91       	pop	r19
 330:	2f 91       	pop	r18
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <BUTTON_init>:
 * INPUTS		: (2) 8-bit Inputs: PIN Number, PORT Number
 * RETURN		: non return void ( Will be set for Error Handling in the future )
 */
void BUTTON_init(uint8_t buttonPin, uint8_t buttonPort)
{
	DIO_init(buttonPin,buttonPort, INPUT);
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_init>
 342:	08 95       	ret

00000344 <LED_on>:
 * INPUTS		: (2) 8-bit Inputs: PIN Number, PORT Number
 * RETURN		: non return void ( Will be set for Error Handling in the future )
 */
void LED_on(uint8_t ledPin, uint8_t ledPort)
{
	DIO_write(ledPin, ledPort, HIGH);
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	0e 94 38 02 	call	0x470	; 0x470 <DIO_write>
 34a:	08 95       	ret

0000034c <LED_off>:
 * INPUTS		: (2) 8-bit Inputs: PIN Number, PORT Number
 * RETURN		: non return void ( Will be set for Error Handling in the future )
 */
void LED_off(uint8_t ledPin, uint8_t ledPort)
{
	DIO_write(ledPin, ledPort, LOW);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	0e 94 38 02 	call	0x470	; 0x470 <DIO_write>
 352:	08 95       	ret

00000354 <LED_toggle>:
 * INPUTS		: (2) 8-bit Inputs: PIN Number, PORT Number
 * RETURN		: non return void ( Will be set for Error Handling in the future )
 */
void LED_toggle(uint8_t ledPin, uint8_t ledPort)
{
	DIO_toggle(ledPin, ledPort);
 354:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_toggle>
 358:	08 95       	ret

0000035a <main>:

#include "Application/app.h"

int main ()
{
	app_init();
 35a:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
	
	while(1)
	{
		app_start();
 35e:	0e 94 7d 00 	call	0xfa	; 0xfa <app_start>
 362:	fd cf       	rjmp	.-6      	; 0x35e <main+0x4>

00000364 <DIO_init>:
 * RETURN		: non return void ( Will be set for Error Handling in the future )
 */
void DIO_init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	// Check For Valid Inputs
	if ((portNumber <= PORT_D) && (pinNumber <= PIN_7))
 364:	64 30       	cpi	r22, 0x04	; 4
 366:	08 f0       	brcs	.+2      	; 0x36a <DIO_init+0x6>
 368:	82 c0       	rjmp	.+260    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 36a:	88 30       	cpi	r24, 0x08	; 8
 36c:	08 f0       	brcs	.+2      	; 0x370 <DIO_init+0xc>
 36e:	7f c0       	rjmp	.+254    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
	{
		if (direction == OUTPUT)
 370:	41 30       	cpi	r20, 0x01	; 1
 372:	e1 f5       	brne	.+120    	; 0x3ec <DIO_init+0x88>
		{
			switch (portNumber)
 374:	61 30       	cpi	r22, 0x01	; 1
 376:	99 f0       	breq	.+38     	; 0x39e <DIO_init+0x3a>
 378:	28 f0       	brcs	.+10     	; 0x384 <DIO_init+0x20>
 37a:	62 30       	cpi	r22, 0x02	; 2
 37c:	e9 f0       	breq	.+58     	; 0x3b8 <DIO_init+0x54>
 37e:	63 30       	cpi	r22, 0x03	; 3
 380:	41 f1       	breq	.+80     	; 0x3d2 <DIO_init+0x6e>
 382:	08 95       	ret
			{
				case PORT_A: SET_BIT(DDRA,pinNumber);break;
 384:	4a b3       	in	r20, 0x1a	; 26
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	b9 01       	movw	r22, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_init+0x2e>
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	8a 95       	dec	r24
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_init+0x2a>
 396:	cb 01       	movw	r24, r22
 398:	84 2b       	or	r24, r20
 39a:	8a bb       	out	0x1a, r24	; 26
 39c:	08 95       	ret
				case PORT_B: SET_BIT(DDRB,pinNumber);break;
 39e:	47 b3       	in	r20, 0x17	; 23
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	b9 01       	movw	r22, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_init+0x48>
 3a8:	66 0f       	add	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_init+0x44>
 3b0:	cb 01       	movw	r24, r22
 3b2:	84 2b       	or	r24, r20
 3b4:	87 bb       	out	0x17, r24	; 23
 3b6:	08 95       	ret
				case PORT_C: SET_BIT(DDRC,pinNumber);break;
 3b8:	44 b3       	in	r20, 0x14	; 20
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	b9 01       	movw	r22, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_init+0x62>
 3c2:	66 0f       	add	r22, r22
 3c4:	77 1f       	adc	r23, r23
 3c6:	8a 95       	dec	r24
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_init+0x5e>
 3ca:	cb 01       	movw	r24, r22
 3cc:	84 2b       	or	r24, r20
 3ce:	84 bb       	out	0x14, r24	; 20
 3d0:	08 95       	ret
				case PORT_D: SET_BIT(DDRD,pinNumber);break;
 3d2:	41 b3       	in	r20, 0x11	; 17
 3d4:	21 e0       	ldi	r18, 0x01	; 1
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	b9 01       	movw	r22, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_init+0x7c>
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	8a 95       	dec	r24
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_init+0x78>
 3e4:	cb 01       	movw	r24, r22
 3e6:	84 2b       	or	r24, r20
 3e8:	81 bb       	out	0x11, r24	; 17
 3ea:	08 95       	ret
			}
		}
		else if (direction == INPUT)
 3ec:	41 11       	cpse	r20, r1
 3ee:	3f c0       	rjmp	.+126    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
		{
			switch (portNumber)
 3f0:	61 30       	cpi	r22, 0x01	; 1
 3f2:	a1 f0       	breq	.+40     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3f4:	28 f0       	brcs	.+10     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f6:	62 30       	cpi	r22, 0x02	; 2
 3f8:	f9 f0       	breq	.+62     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 3fa:	63 30       	cpi	r22, 0x03	; 3
 3fc:	59 f1       	breq	.+86     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 3fe:	08 95       	ret
			{
				case PORT_A: CLR_BIT(DDRA,pinNumber);break;
 400:	4a b3       	in	r20, 0x1a	; 26
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	8a bb       	out	0x1a, r24	; 26
 41a:	08 95       	ret
				case PORT_B: CLR_BIT(DDRB,pinNumber);break;
 41c:	47 b3       	in	r20, 0x17	; 23
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	b9 01       	movw	r22, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	8a 95       	dec	r24
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	cb 01       	movw	r24, r22
 430:	80 95       	com	r24
 432:	84 23       	and	r24, r20
 434:	87 bb       	out	0x17, r24	; 23
 436:	08 95       	ret
				case PORT_C: CLR_BIT(DDRC,pinNumber);break;
 438:	44 b3       	in	r20, 0x14	; 20
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	b9 01       	movw	r22, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	8a 95       	dec	r24
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	cb 01       	movw	r24, r22
 44c:	80 95       	com	r24
 44e:	84 23       	and	r24, r20
 450:	84 bb       	out	0x14, r24	; 20
 452:	08 95       	ret
				case PORT_D: CLR_BIT(DDRD,pinNumber);break;
 454:	41 b3       	in	r20, 0x11	; 17
 456:	21 e0       	ldi	r18, 0x01	; 1
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	b9 01       	movw	r22, r18
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	66 0f       	add	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	8a 95       	dec	r24
 464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	cb 01       	movw	r24, r22
 468:	80 95       	com	r24
 46a:	84 23       	and	r24, r20
 46c:	81 bb       	out	0x11, r24	; 17
 46e:	08 95       	ret

00000470 <DIO_write>:
 * RETURN		: non return void ( Will be set for Error Handling in the future )
 */
void DIO_write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	// Check For Valid Inputs
	if ((portNumber <= PORT_D) && (pinNumber <= PIN_7))
 470:	64 30       	cpi	r22, 0x04	; 4
 472:	08 f0       	brcs	.+2      	; 0x476 <DIO_write+0x6>
 474:	82 c0       	rjmp	.+260    	; 0x57a <DIO_write+0x10a>
 476:	88 30       	cpi	r24, 0x08	; 8
 478:	08 f0       	brcs	.+2      	; 0x47c <DIO_write+0xc>
 47a:	7f c0       	rjmp	.+254    	; 0x57a <DIO_write+0x10a>
	{
		if (value == HIGH)
 47c:	41 30       	cpi	r20, 0x01	; 1
 47e:	e1 f5       	brne	.+120    	; 0x4f8 <DIO_write+0x88>
		{
			switch (portNumber)
 480:	61 30       	cpi	r22, 0x01	; 1
 482:	99 f0       	breq	.+38     	; 0x4aa <DIO_write+0x3a>
 484:	28 f0       	brcs	.+10     	; 0x490 <DIO_write+0x20>
 486:	62 30       	cpi	r22, 0x02	; 2
 488:	e9 f0       	breq	.+58     	; 0x4c4 <DIO_write+0x54>
 48a:	63 30       	cpi	r22, 0x03	; 3
 48c:	41 f1       	breq	.+80     	; 0x4de <DIO_write+0x6e>
 48e:	08 95       	ret
			{
				case PORT_A: SET_BIT(PORTA,pinNumber);break;
 490:	4b b3       	in	r20, 0x1b	; 27
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	b9 01       	movw	r22, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_write+0x2e>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	8a 95       	dec	r24
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_write+0x2a>
 4a2:	cb 01       	movw	r24, r22
 4a4:	84 2b       	or	r24, r20
 4a6:	8b bb       	out	0x1b, r24	; 27
 4a8:	08 95       	ret
				case PORT_B: SET_BIT(PORTB,pinNumber);break;
 4aa:	48 b3       	in	r20, 0x18	; 24
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	b9 01       	movw	r22, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_write+0x48>
 4b4:	66 0f       	add	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	8a 95       	dec	r24
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_write+0x44>
 4bc:	cb 01       	movw	r24, r22
 4be:	84 2b       	or	r24, r20
 4c0:	88 bb       	out	0x18, r24	; 24
 4c2:	08 95       	ret
				case PORT_C: SET_BIT(PORTC,pinNumber);break;
 4c4:	45 b3       	in	r20, 0x15	; 21
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	b9 01       	movw	r22, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_write+0x62>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_write+0x5e>
 4d6:	cb 01       	movw	r24, r22
 4d8:	84 2b       	or	r24, r20
 4da:	85 bb       	out	0x15, r24	; 21
 4dc:	08 95       	ret
				case PORT_D: SET_BIT(PORTD,pinNumber);break;
 4de:	42 b3       	in	r20, 0x12	; 18
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	b9 01       	movw	r22, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_write+0x7c>
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	8a 95       	dec	r24
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_write+0x78>
 4f0:	cb 01       	movw	r24, r22
 4f2:	84 2b       	or	r24, r20
 4f4:	82 bb       	out	0x12, r24	; 18
 4f6:	08 95       	ret
			}
		}
		else if (value == LOW)
 4f8:	41 11       	cpse	r20, r1
 4fa:	3f c0       	rjmp	.+126    	; 0x57a <DIO_write+0x10a>
		{
			switch (portNumber)
 4fc:	61 30       	cpi	r22, 0x01	; 1
 4fe:	a1 f0       	breq	.+40     	; 0x528 <DIO_write+0xb8>
 500:	28 f0       	brcs	.+10     	; 0x50c <DIO_write+0x9c>
 502:	62 30       	cpi	r22, 0x02	; 2
 504:	f9 f0       	breq	.+62     	; 0x544 <DIO_write+0xd4>
 506:	63 30       	cpi	r22, 0x03	; 3
 508:	59 f1       	breq	.+86     	; 0x560 <DIO_write+0xf0>
 50a:	08 95       	ret
			{
				case PORT_A: CLR_BIT(PORTA,pinNumber);break;
 50c:	4b b3       	in	r20, 0x1b	; 27
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	b9 01       	movw	r22, r18
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_write+0xaa>
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	8a 95       	dec	r24
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_write+0xa6>
 51e:	cb 01       	movw	r24, r22
 520:	80 95       	com	r24
 522:	84 23       	and	r24, r20
 524:	8b bb       	out	0x1b, r24	; 27
 526:	08 95       	ret
				case PORT_B: CLR_BIT(PORTB,pinNumber);break;
 528:	48 b3       	in	r20, 0x18	; 24
 52a:	21 e0       	ldi	r18, 0x01	; 1
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	b9 01       	movw	r22, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_write+0xc6>
 532:	66 0f       	add	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	8a 95       	dec	r24
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_write+0xc2>
 53a:	cb 01       	movw	r24, r22
 53c:	80 95       	com	r24
 53e:	84 23       	and	r24, r20
 540:	88 bb       	out	0x18, r24	; 24
 542:	08 95       	ret
				case PORT_C: CLR_BIT(PORTC,pinNumber);break;
 544:	45 b3       	in	r20, 0x15	; 21
 546:	21 e0       	ldi	r18, 0x01	; 1
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	b9 01       	movw	r22, r18
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_write+0xe2>
 54e:	66 0f       	add	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	8a 95       	dec	r24
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_write+0xde>
 556:	cb 01       	movw	r24, r22
 558:	80 95       	com	r24
 55a:	84 23       	and	r24, r20
 55c:	85 bb       	out	0x15, r24	; 21
 55e:	08 95       	ret
				case PORT_D: CLR_BIT(PORTD,pinNumber);break;
 560:	42 b3       	in	r20, 0x12	; 18
 562:	21 e0       	ldi	r18, 0x01	; 1
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	b9 01       	movw	r22, r18
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_write+0xfe>
 56a:	66 0f       	add	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	8a 95       	dec	r24
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_write+0xfa>
 572:	cb 01       	movw	r24, r22
 574:	80 95       	com	r24
 576:	84 23       	and	r24, r20
 578:	82 bb       	out	0x12, r24	; 18
 57a:	08 95       	ret

0000057c <DIO_toggle>:
 * RETURN		: non return void ( Will be set for Error Handling in the future )
 */
void DIO_toggle(uint8_t pinNumber, uint8_t portNumber)
{
	// Check For Valid Inputs
	if ((portNumber <= PORT_D) && (pinNumber <= PIN_7))
 57c:	64 30       	cpi	r22, 0x04	; 4
 57e:	e8 f5       	brcc	.+122    	; 0x5fa <DIO_toggle+0x7e>
 580:	88 30       	cpi	r24, 0x08	; 8
 582:	d8 f5       	brcc	.+118    	; 0x5fa <DIO_toggle+0x7e>
	{
		switch (portNumber)
 584:	61 30       	cpi	r22, 0x01	; 1
 586:	99 f0       	breq	.+38     	; 0x5ae <DIO_toggle+0x32>
 588:	28 f0       	brcs	.+10     	; 0x594 <DIO_toggle+0x18>
 58a:	62 30       	cpi	r22, 0x02	; 2
 58c:	e9 f0       	breq	.+58     	; 0x5c8 <DIO_toggle+0x4c>
 58e:	63 30       	cpi	r22, 0x03	; 3
 590:	41 f1       	breq	.+80     	; 0x5e2 <DIO_toggle+0x66>
 592:	08 95       	ret
		{
			case PORT_A: TOGG_BIT(PORTA,pinNumber);break;
 594:	4b b3       	in	r20, 0x1b	; 27
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	b9 01       	movw	r22, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_toggle+0x26>
 59e:	66 0f       	add	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	8a 95       	dec	r24
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_toggle+0x22>
 5a6:	cb 01       	movw	r24, r22
 5a8:	84 27       	eor	r24, r20
 5aa:	8b bb       	out	0x1b, r24	; 27
 5ac:	08 95       	ret
			case PORT_B: TOGG_BIT(PORTB,pinNumber);break;
 5ae:	48 b3       	in	r20, 0x18	; 24
 5b0:	21 e0       	ldi	r18, 0x01	; 1
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	b9 01       	movw	r22, r18
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_toggle+0x40>
 5b8:	66 0f       	add	r22, r22
 5ba:	77 1f       	adc	r23, r23
 5bc:	8a 95       	dec	r24
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_toggle+0x3c>
 5c0:	cb 01       	movw	r24, r22
 5c2:	84 27       	eor	r24, r20
 5c4:	88 bb       	out	0x18, r24	; 24
 5c6:	08 95       	ret
			case PORT_C: TOGG_BIT(PORTC,pinNumber);break;
 5c8:	45 b3       	in	r20, 0x15	; 21
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	b9 01       	movw	r22, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_toggle+0x5a>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	8a 95       	dec	r24
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_toggle+0x56>
 5da:	cb 01       	movw	r24, r22
 5dc:	84 27       	eor	r24, r20
 5de:	85 bb       	out	0x15, r24	; 21
 5e0:	08 95       	ret
			case PORT_D: TOGG_BIT(PORTD,pinNumber);break;
 5e2:	42 b3       	in	r20, 0x12	; 18
 5e4:	21 e0       	ldi	r18, 0x01	; 1
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	b9 01       	movw	r22, r18
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_toggle+0x74>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	8a 95       	dec	r24
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_toggle+0x70>
 5f4:	cb 01       	movw	r24, r22
 5f6:	84 27       	eor	r24, r20
 5f8:	82 bb       	out	0x12, r24	; 18
 5fa:	08 95       	ret

000005fc <TIMER0_init>:
	}
	
	overFlowCounter = 0;
	
	TIMER0_stop();
}
 5fc:	84 30       	cpi	r24, 0x04	; 4
 5fe:	90 f4       	brcc	.+36     	; 0x624 <TIMER0_init+0x28>
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	41 f0       	breq	.+16     	; 0x614 <TIMER0_init+0x18>
 604:	28 f0       	brcs	.+10     	; 0x610 <TIMER0_init+0x14>
 606:	82 30       	cpi	r24, 0x02	; 2
 608:	41 f0       	breq	.+16     	; 0x61a <TIMER0_init+0x1e>
 60a:	83 30       	cpi	r24, 0x03	; 3
 60c:	49 f0       	breq	.+18     	; 0x620 <TIMER0_init+0x24>
 60e:	08 95       	ret
 610:	13 be       	out	0x33, r1	; 51
 612:	08 95       	ret
 614:	80 e4       	ldi	r24, 0x40	; 64
 616:	83 bf       	out	0x33, r24	; 51
 618:	08 95       	ret
 61a:	88 e0       	ldi	r24, 0x08	; 8
 61c:	83 bf       	out	0x33, r24	; 51
 61e:	08 95       	ret
 620:	88 e4       	ldi	r24, 0x48	; 72
 622:	83 bf       	out	0x33, r24	; 51
 624:	08 95       	ret

00000626 <TIMER0_start>:
 626:	62 bf       	out	0x32, r22	; 50
 628:	85 30       	cpi	r24, 0x05	; 5
 62a:	f0 f5       	brcc	.+124    	; 0x6a8 <TIMER0_start+0x82>
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	f9 f0       	breq	.+62     	; 0x66e <TIMER0_start+0x48>
 630:	28 f4       	brcc	.+10     	; 0x63c <TIMER0_start+0x16>
 632:	88 23       	and	r24, r24
 634:	41 f0       	breq	.+16     	; 0x646 <TIMER0_start+0x20>
 636:	81 30       	cpi	r24, 0x01	; 1
 638:	81 f0       	breq	.+32     	; 0x65a <TIMER0_start+0x34>
 63a:	08 95       	ret
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	09 f1       	breq	.+66     	; 0x682 <TIMER0_start+0x5c>
 640:	84 30       	cpi	r24, 0x04	; 4
 642:	49 f1       	breq	.+82     	; 0x696 <TIMER0_start+0x70>
 644:	08 95       	ret
 646:	83 b7       	in	r24, 0x33	; 51
 648:	81 60       	ori	r24, 0x01	; 1
 64a:	83 bf       	out	0x33, r24	; 51
 64c:	83 b7       	in	r24, 0x33	; 51
 64e:	8d 7f       	andi	r24, 0xFD	; 253
 650:	83 bf       	out	0x33, r24	; 51
 652:	83 b7       	in	r24, 0x33	; 51
 654:	8b 7f       	andi	r24, 0xFB	; 251
 656:	83 bf       	out	0x33, r24	; 51
 658:	08 95       	ret
 65a:	83 b7       	in	r24, 0x33	; 51
 65c:	8e 7f       	andi	r24, 0xFE	; 254
 65e:	83 bf       	out	0x33, r24	; 51
 660:	83 b7       	in	r24, 0x33	; 51
 662:	82 60       	ori	r24, 0x02	; 2
 664:	83 bf       	out	0x33, r24	; 51
 666:	83 b7       	in	r24, 0x33	; 51
 668:	8b 7f       	andi	r24, 0xFB	; 251
 66a:	83 bf       	out	0x33, r24	; 51
 66c:	08 95       	ret
 66e:	83 b7       	in	r24, 0x33	; 51
 670:	81 60       	ori	r24, 0x01	; 1
 672:	83 bf       	out	0x33, r24	; 51
 674:	83 b7       	in	r24, 0x33	; 51
 676:	82 60       	ori	r24, 0x02	; 2
 678:	83 bf       	out	0x33, r24	; 51
 67a:	83 b7       	in	r24, 0x33	; 51
 67c:	8b 7f       	andi	r24, 0xFB	; 251
 67e:	83 bf       	out	0x33, r24	; 51
 680:	08 95       	ret
 682:	83 b7       	in	r24, 0x33	; 51
 684:	8e 7f       	andi	r24, 0xFE	; 254
 686:	83 bf       	out	0x33, r24	; 51
 688:	83 b7       	in	r24, 0x33	; 51
 68a:	8d 7f       	andi	r24, 0xFD	; 253
 68c:	83 bf       	out	0x33, r24	; 51
 68e:	83 b7       	in	r24, 0x33	; 51
 690:	84 60       	ori	r24, 0x04	; 4
 692:	83 bf       	out	0x33, r24	; 51
 694:	08 95       	ret
 696:	83 b7       	in	r24, 0x33	; 51
 698:	81 60       	ori	r24, 0x01	; 1
 69a:	83 bf       	out	0x33, r24	; 51
 69c:	83 b7       	in	r24, 0x33	; 51
 69e:	8d 7f       	andi	r24, 0xFD	; 253
 6a0:	83 bf       	out	0x33, r24	; 51
 6a2:	83 b7       	in	r24, 0x33	; 51
 6a4:	84 60       	ori	r24, 0x04	; 4
 6a6:	83 bf       	out	0x33, r24	; 51
 6a8:	08 95       	ret

000006aa <TIMER2_init>:
 * RETURN		: non return void ( Will be set for Error Handling in the future )
 */
void TIMER2_init(uint8_t timerMode)
{
	// Check For Valid Inputs
	if(timerMode <= FAST_PWM_MODE)
 6aa:	84 30       	cpi	r24, 0x04	; 4
 6ac:	90 f4       	brcc	.+36     	; 0x6d2 <TIMER2_init+0x28>
	{
		switch(timerMode)
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	41 f0       	breq	.+16     	; 0x6c2 <TIMER2_init+0x18>
 6b2:	28 f0       	brcs	.+10     	; 0x6be <TIMER2_init+0x14>
 6b4:	82 30       	cpi	r24, 0x02	; 2
 6b6:	41 f0       	breq	.+16     	; 0x6c8 <TIMER2_init+0x1e>
 6b8:	83 30       	cpi	r24, 0x03	; 3
 6ba:	49 f0       	breq	.+18     	; 0x6ce <TIMER2_init+0x24>
 6bc:	08 95       	ret
		{
			case NORMAL_MODE:			TCCR2 = 0x00; break;
 6be:	15 bc       	out	0x25, r1	; 37
 6c0:	08 95       	ret
			case PHASE_CORRECT_MODE:	TCCR2 = 0x40; break;
 6c2:	80 e4       	ldi	r24, 0x40	; 64
 6c4:	85 bd       	out	0x25, r24	; 37
 6c6:	08 95       	ret
			case CTC_MODE:				TCCR2 = 0x08; break;
 6c8:	88 e0       	ldi	r24, 0x08	; 8
 6ca:	85 bd       	out	0x25, r24	; 37
 6cc:	08 95       	ret
			case FAST_PWM_MODE:			TCCR2 = 0x48; break;
 6ce:	88 e4       	ldi	r24, 0x48	; 72
 6d0:	85 bd       	out	0x25, r24	; 37
 6d2:	08 95       	ret

000006d4 <TIMER2_start>:
 * RETURN		: non return void ( Will be set for Error Handling in the future )
 */
void TIMER2_start(uint8_t timerPrescaler, uint8_t Initial_Value)
{
	// Set Initial Timer Value
	TCNT2 = Initial_Value;
 6d4:	64 bd       	out	0x24, r22	; 36
	
	// Check For Valid Inputs
	if(timerPrescaler <= PRESCALER_1024)
 6d6:	85 30       	cpi	r24, 0x05	; 5
 6d8:	f0 f5       	brcc	.+124    	; 0x756 <TIMER2_start+0x82>
	{
		switch(timerPrescaler)
 6da:	82 30       	cpi	r24, 0x02	; 2
 6dc:	f9 f0       	breq	.+62     	; 0x71c <TIMER2_start+0x48>
 6de:	28 f4       	brcc	.+10     	; 0x6ea <TIMER2_start+0x16>
 6e0:	88 23       	and	r24, r24
 6e2:	41 f0       	breq	.+16     	; 0x6f4 <TIMER2_start+0x20>
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	81 f0       	breq	.+32     	; 0x708 <TIMER2_start+0x34>
 6e8:	08 95       	ret
 6ea:	83 30       	cpi	r24, 0x03	; 3
 6ec:	09 f1       	breq	.+66     	; 0x730 <TIMER2_start+0x5c>
 6ee:	84 30       	cpi	r24, 0x04	; 4
 6f0:	49 f1       	breq	.+82     	; 0x744 <TIMER2_start+0x70>
 6f2:	08 95       	ret
		{
			case NO_PRESCALER:
			
				SET_BIT(TCCR2, CS20);
 6f4:	85 b5       	in	r24, 0x25	; 37
 6f6:	81 60       	ori	r24, 0x01	; 1
 6f8:	85 bd       	out	0x25, r24	; 37
				CLR_BIT(TCCR2, CS21);
 6fa:	85 b5       	in	r24, 0x25	; 37
 6fc:	8d 7f       	andi	r24, 0xFD	; 253
 6fe:	85 bd       	out	0x25, r24	; 37
				CLR_BIT(TCCR2, CS22);
 700:	85 b5       	in	r24, 0x25	; 37
 702:	8b 7f       	andi	r24, 0xFB	; 251
 704:	85 bd       	out	0x25, r24	; 37
				break;
 706:	08 95       	ret
			
			case PRESCALER_8:
			
				CLR_BIT(TCCR2, CS20);
 708:	85 b5       	in	r24, 0x25	; 37
 70a:	8e 7f       	andi	r24, 0xFE	; 254
 70c:	85 bd       	out	0x25, r24	; 37
				SET_BIT(TCCR2, CS21);
 70e:	85 b5       	in	r24, 0x25	; 37
 710:	82 60       	ori	r24, 0x02	; 2
 712:	85 bd       	out	0x25, r24	; 37
				CLR_BIT(TCCR2, CS22);
 714:	85 b5       	in	r24, 0x25	; 37
 716:	8b 7f       	andi	r24, 0xFB	; 251
 718:	85 bd       	out	0x25, r24	; 37
				break;
 71a:	08 95       	ret
			
			case PRESCALER_64:
			
				SET_BIT(TCCR2,	CS20);
 71c:	85 b5       	in	r24, 0x25	; 37
 71e:	81 60       	ori	r24, 0x01	; 1
 720:	85 bd       	out	0x25, r24	; 37
				SET_BIT(TCCR2,	CS21);
 722:	85 b5       	in	r24, 0x25	; 37
 724:	82 60       	ori	r24, 0x02	; 2
 726:	85 bd       	out	0x25, r24	; 37
				CLR_BIT(TCCR2,	CS22);
 728:	85 b5       	in	r24, 0x25	; 37
 72a:	8b 7f       	andi	r24, 0xFB	; 251
 72c:	85 bd       	out	0x25, r24	; 37
				break;
 72e:	08 95       	ret
			
			case PRESCALER_256:
			
				CLR_BIT(TCCR2, CS20);
 730:	85 b5       	in	r24, 0x25	; 37
 732:	8e 7f       	andi	r24, 0xFE	; 254
 734:	85 bd       	out	0x25, r24	; 37
				CLR_BIT(TCCR2, CS21);
 736:	85 b5       	in	r24, 0x25	; 37
 738:	8d 7f       	andi	r24, 0xFD	; 253
 73a:	85 bd       	out	0x25, r24	; 37
				SET_BIT(TCCR2, CS22);
 73c:	85 b5       	in	r24, 0x25	; 37
 73e:	84 60       	ori	r24, 0x04	; 4
 740:	85 bd       	out	0x25, r24	; 37
				break;
 742:	08 95       	ret
			
			case PRESCALER_1024:
			
				SET_BIT(TCCR2, CS20);
 744:	85 b5       	in	r24, 0x25	; 37
 746:	81 60       	ori	r24, 0x01	; 1
 748:	85 bd       	out	0x25, r24	; 37
				CLR_BIT(TCCR2, CS21);
 74a:	85 b5       	in	r24, 0x25	; 37
 74c:	8d 7f       	andi	r24, 0xFD	; 253
 74e:	85 bd       	out	0x25, r24	; 37
				SET_BIT(TCCR2, CS22);
 750:	85 b5       	in	r24, 0x25	; 37
 752:	84 60       	ori	r24, 0x04	; 4
 754:	85 bd       	out	0x25, r24	; 37
 756:	08 95       	ret

00000758 <TIMER2_stop>:
 * INPUTS		: No Inputs (void)
 * RETURN		: non return void ( Will be set for Error Handling in the future )
 */
void TIMER2_stop(void)
{
	TCCR2 = 0x00;
 758:	15 bc       	out	0x25, r1	; 37
 75a:	08 95       	ret

0000075c <_exit>:
 75c:	f8 94       	cli

0000075e <__stop_program>:
 75e:	ff cf       	rjmp	.-2      	; 0x75e <__stop_program>
